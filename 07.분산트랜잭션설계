ㅇ 분산환경에서 Data의 일관성을 유지하려면 2PC 구조가 되어야 한다. 
ㅇ 2PC는 분산환경의 가용성을 떨어뜨리고 한 트랜잭션이 끝나면 다음 트랜잭션까지 blocking이 발생하기 때문에 MSA환경에 적합하지 않음.

ㅇ BASE 개념
  . 클라우드 환경에서 두 MS간의 Consistency 개념은 Soft-state를 기반으로 Eventually Consistency일 수 밖에 없음.
  . 이벤트 기반의 데이터 처리 설계
    1. Basically Available : 분산시스템이기 때문에 항상 가용성이 중시됨. 클라우드에서 분산은 필수
    2. Soft-state : 노드의 상태는 내부에 포함된 정보가 아니라 외부에서 전송된 정보를 통하여 결정.
    3. Eventually Consistency : 외부의 정보가 도착할때까지는 데이터 일관성이 없는 상태임. 일시적인 무결성이 깨지는 것을 인정하고 최종적으로는
                                무결성이 유지된사는 사상.

ㅇ Event기반 Data 관리
   - MS는 각각의 저장소를 가지고 있기 때문에 Data 무결성이 깨지는 문제가 발생함.
   - 해결책으로 이벤트 중심의 설계.
   - 타 MS에 Data 전달이 필요한 이벤트가 발생하면 해당 이벤트를 발행하고 다른 MS가 이를 수신하여 자체 Data를 갱신.
   
   1. Message Queue방식
      - 각 MS에서 자체 트랜잭션을 종료하고 다음 단계의 이벤트를 게시하면 타 MS에서 이를 구독하여 트랜잭션을 처리함.
      - 메세지 브로커를 통해서 이벤트를 교환함.
   
   2. Event 테이블 활용
      - 특정 서비스가 트랜잭션을 종료하고 이벤트 테이블에 등록을 하면 이벤트 퍼블리셔가 해당 내용을 조회하여 메세지 브로커에 전달하는 방식
   
   3. DB 트랜잭션 로그 마이닝
      - 오라클 트랜잭션 로그를 조사하고 벼낭사항에 해당하는 이벤트를 게시.
   4. 이벤트 소싱 활용
       - 엔티티의 현재상태를 저장하는 것이 아니라 상태변경 이벤트의 순서를 저장하고 이벤트를 재생하여 엔티티의 현재상태를 재구성함.
